'''

The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

'''

# Started on 27th March 2015 16:15 PM

import time
start_time = time.clock()

number = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843" \
         "8586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557" \
         "6689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749" \
         "3035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776" \
         "6572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397" \
         "5369781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535100474" \
         "8216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586" \
         "1786645835912456652947654568284891288314260769004224219022671055626321111109370544217506941658960408" \
         "0719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606" \
         "0588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"

list_number = []

for i in range(1, 988):
    first_string = number[i]
    second_string = number[i+1]
    third_string = number[i+2]
    fourth_string = number[i+3]
    fifth_string = number[i+4]
    sixth_string = number[i+5]
    seventh_string = number[i+6]
    eight_string = number[i+7]
    ninth_string = number[i+8]
    tenth_string = number[i+9]
    eleventh_string = number[i+10]
    twelfth_string = number[i+11]
    thirteenth_string = number[i+12]

    first_number = int(first_string)
    second_number = int(second_string)
    third_number = int(third_string)
    fourth_number = int(fourth_string)
    fifth_number = int(fifth_string)
    sixth_number = int(sixth_string)
    seventh_number = int(seventh_string)
    eight_number = int(eight_string)
    ninth_number = int(ninth_string)
    tenth_number = int(tenth_string)
    eleventh_number = int(eleventh_string)
    twelfth_number = int(twelfth_string)
    thirteenth_number = int(thirteenth_string)

    product_number = first_number*second_number*third_number*fourth_number*fifth_number*sixth_number*seventh_number
    product_number *= eight_number*ninth_number*tenth_number*eleventh_number*twelfth_number*thirteenth_number
    list_number.append(product_number)

print(max(list_number))

end_time = time.clock()
total_time = end_time - start_time
print('This took ' + str(total_time) + ' seconds to complete')

# Completed on 29th March 2015 13:59 PM